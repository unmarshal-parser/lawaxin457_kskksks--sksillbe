// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddressExcludedFromFees extends ethereum.Event {
  get params(): AddressExcludedFromFees__Params {
    return new AddressExcludedFromFees__Params(this);
  }
}

export class AddressExcludedFromFees__Params {
  _event: AddressExcludedFromFees;

  constructor(event: AddressExcludedFromFees) {
    this._event = event;
  }

  get _address(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class AddressIncludedInFees extends ethereum.Event {
  get params(): AddressIncludedInFees__Params {
    return new AddressIncludedInFees__Params(this);
  }
}

export class AddressIncludedInFees__Params {
  _event: AddressIncludedInFees;

  constructor(event: AddressIncludedInFees) {
    this._event = event;
  }

  get _address(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BuyFeeUpdated extends ethereum.Event {
  get params(): BuyFeeUpdated__Params {
    return new BuyFeeUpdated__Params(this);
  }
}

export class BuyFeeUpdated__Params {
  _event: BuyFeeUpdated;

  constructor(event: BuyFeeUpdated) {
    this._event = event;
  }

  get _fee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _previousFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LeetPairAdded extends ethereum.Event {
  get params(): LeetPairAdded__Params {
    return new LeetPairAdded__Params(this);
  }
}

export class LeetPairAdded__Params {
  _event: LeetPairAdded;

  constructor(event: LeetPairAdded) {
    this._event = event;
  }

  get _pair(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LeetPairRemoved extends ethereum.Event {
  get params(): LeetPairRemoved__Params {
    return new LeetPairRemoved__Params(this);
  }
}

export class LeetPairRemoved__Params {
  _event: LeetPairRemoved;

  constructor(event: LeetPairRemoved) {
    this._event = event;
  }

  get _pair(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SellFeeUpdated extends ethereum.Event {
  get params(): SellFeeUpdated__Params {
    return new SellFeeUpdated__Params(this);
  }
}

export class SellFeeUpdated__Params {
  _event: SellFeeUpdated;

  constructor(event: SellFeeUpdated) {
    this._event = event;
  }

  get _fee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _previousFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class WhitelistedFactoryAdded extends ethereum.Event {
  get params(): WhitelistedFactoryAdded__Params {
    return new WhitelistedFactoryAdded__Params(this);
  }
}

export class WhitelistedFactoryAdded__Params {
  _event: WhitelistedFactoryAdded;

  constructor(event: WhitelistedFactoryAdded) {
    this._event = event;
  }

  get _factory(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class WhitelistedFactoryRemoved extends ethereum.Event {
  get params(): WhitelistedFactoryRemoved__Params {
    return new WhitelistedFactoryRemoved__Params(this);
  }
}

export class WhitelistedFactoryRemoved__Params {
  _event: WhitelistedFactoryRemoved;

  constructor(event: WhitelistedFactoryRemoved) {
    this._event = event;
  }

  get _factory(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  DEAD(): Address {
    let result = super.call("DEAD", "DEAD():(address)", []);

    return result[0].toAddress();
  }

  try_DEAD(): ethereum.CallResult<Address> {
    let result = super.tryCall("DEAD", "DEAD():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  FEE_DENOMINATOR(): BigInt {
    let result = super.call(
      "FEE_DENOMINATOR",
      "FEE_DENOMINATOR():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_FEE_DENOMINATOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "FEE_DENOMINATOR",
      "FEE_DENOMINATOR():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_FEE(): BigInt {
    let result = super.call("MAX_FEE", "MAX_FEE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_FEE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MAX_FEE", "MAX_FEE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  burnBuyFee(): BigInt {
    let result = super.call("burnBuyFee", "burnBuyFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_burnBuyFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("burnBuyFee", "burnBuyFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  burnSellFee(): BigInt {
    let result = super.call("burnSellFee", "burnSellFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_burnSellFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("burnSellFee", "burnSellFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  buyFeeDiscountFor(account: Address, totalFeeAmount: BigInt): BigInt {
    let result = super.call(
      "buyFeeDiscountFor",
      "buyFeeDiscountFor(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(totalFeeAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_buyFeeDiscountFor(
    account: Address,
    totalFeeAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "buyFeeDiscountFor",
      "buyFeeDiscountFor(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(totalFeeAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  farmsBuyFee(): BigInt {
    let result = super.call("farmsBuyFee", "farmsBuyFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_farmsBuyFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("farmsBuyFee", "farmsBuyFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  farmsFeeRecipient(): Address {
    let result = super.call(
      "farmsFeeRecipient",
      "farmsFeeRecipient():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_farmsFeeRecipient(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "farmsFeeRecipient",
      "farmsFeeRecipient():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  farmsSellFee(): BigInt {
    let result = super.call("farmsSellFee", "farmsSellFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_farmsSellFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("farmsSellFee", "farmsSellFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feeDiscountOracle(): Address {
    let result = super.call(
      "feeDiscountOracle",
      "feeDiscountOracle():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_feeDiscountOracle(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "feeDiscountOracle",
      "feeDiscountOracle():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  indirectSwapFeeEnabled(): boolean {
    let result = super.call(
      "indirectSwapFeeEnabled",
      "indirectSwapFeeEnabled():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_indirectSwapFeeEnabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "indirectSwapFeeEnabled",
      "indirectSwapFeeEnabled():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isBot(param0: Address): boolean {
    let result = super.call("isBot", "isBot(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isBot(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isBot", "isBot(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isExcludedFromFee(param0: Address): boolean {
    let result = super.call(
      "isExcludedFromFee",
      "isExcludedFromFee(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_isExcludedFromFee(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isExcludedFromFee",
      "isExcludedFromFee(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isExcludedFromMaxWallet(account: Address): boolean {
    let result = super.call(
      "isExcludedFromMaxWallet",
      "isExcludedFromMaxWallet(address):(bool)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBoolean();
  }

  try_isExcludedFromMaxWallet(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isExcludedFromMaxWallet",
      "isExcludedFromMaxWallet(address):(bool)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isLeetPair(_pair: Address): boolean {
    let result = super.call("isLeetPair", "isLeetPair(address):(bool)", [
      ethereum.Value.fromAddress(_pair)
    ]);

    return result[0].toBoolean();
  }

  try_isLeetPair(_pair: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isLeetPair", "isLeetPair(address):(bool)", [
      ethereum.Value.fromAddress(_pair)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isLiquidityManagementPhase(): boolean {
    let result = super.call(
      "isLiquidityManagementPhase",
      "isLiquidityManagementPhase():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_isLiquidityManagementPhase(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isLiquidityManagementPhase",
      "isLiquidityManagementPhase():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isLiquidityManager(param0: Address): boolean {
    let result = super.call(
      "isLiquidityManager",
      "isLiquidityManager(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_isLiquidityManager(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isLiquidityManager",
      "isLiquidityManager(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isSwappingFees(): boolean {
    let result = super.call("isSwappingFees", "isSwappingFees():(bool)", []);

    return result[0].toBoolean();
  }

  try_isSwappingFees(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isSwappingFees", "isSwappingFees():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isWhitelistedFactory(param0: Address): boolean {
    let result = super.call(
      "isWhitelistedFactory",
      "isWhitelistedFactory(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_isWhitelistedFactory(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isWhitelistedFactory",
      "isWhitelistedFactory(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxSwapFeesAmount(): BigInt {
    let result = super.call(
      "maxSwapFeesAmount",
      "maxSwapFeesAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxSwapFeesAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxSwapFeesAmount",
      "maxSwapFeesAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxWalletAmount(): BigInt {
    let result = super.call(
      "maxWalletAmount",
      "maxWalletAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxWalletAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxWalletAmount",
      "maxWalletAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxWalletEnabled(): boolean {
    let result = super.call(
      "maxWalletEnabled",
      "maxWalletEnabled():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_maxWalletEnabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "maxWalletEnabled",
      "maxWalletEnabled():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pairAutoDetectionEnabled(): boolean {
    let result = super.call(
      "pairAutoDetectionEnabled",
      "pairAutoDetectionEnabled():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_pairAutoDetectionEnabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "pairAutoDetectionEnabled",
      "pairAutoDetectionEnabled():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  sellFeeDiscountFor(account: Address, totalFeeAmount: BigInt): BigInt {
    let result = super.call(
      "sellFeeDiscountFor",
      "sellFeeDiscountFor(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(totalFeeAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_sellFeeDiscountFor(
    account: Address,
    totalFeeAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sellFeeDiscountFor",
      "sellFeeDiscountFor(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(totalFeeAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sniperBuyBaseFee(): BigInt {
    let result = super.call(
      "sniperBuyBaseFee",
      "sniperBuyBaseFee():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_sniperBuyBaseFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sniperBuyBaseFee",
      "sniperBuyBaseFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sniperBuyFee(): BigInt {
    let result = super.call("sniperBuyFee", "sniperBuyFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_sniperBuyFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("sniperBuyFee", "sniperBuyFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sniperBuyFeeBurnShare(): BigInt {
    let result = super.call(
      "sniperBuyFeeBurnShare",
      "sniperBuyFeeBurnShare():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_sniperBuyFeeBurnShare(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sniperBuyFeeBurnShare",
      "sniperBuyFeeBurnShare():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sniperBuyFeeDecayPeriod(): BigInt {
    let result = super.call(
      "sniperBuyFeeDecayPeriod",
      "sniperBuyFeeDecayPeriod():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_sniperBuyFeeDecayPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sniperBuyFeeDecayPeriod",
      "sniperBuyFeeDecayPeriod():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sniperBuyFeeEnabled(): boolean {
    let result = super.call(
      "sniperBuyFeeEnabled",
      "sniperBuyFeeEnabled():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_sniperBuyFeeEnabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "sniperBuyFeeEnabled",
      "sniperBuyFeeEnabled():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  sniperSellBaseFee(): BigInt {
    let result = super.call(
      "sniperSellBaseFee",
      "sniperSellBaseFee():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_sniperSellBaseFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sniperSellBaseFee",
      "sniperSellBaseFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sniperSellFee(): BigInt {
    let result = super.call("sniperSellFee", "sniperSellFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_sniperSellFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sniperSellFee",
      "sniperSellFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sniperSellFeeBurnShare(): BigInt {
    let result = super.call(
      "sniperSellFeeBurnShare",
      "sniperSellFeeBurnShare():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_sniperSellFeeBurnShare(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sniperSellFeeBurnShare",
      "sniperSellFeeBurnShare():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sniperSellFeeDecayPeriod(): BigInt {
    let result = super.call(
      "sniperSellFeeDecayPeriod",
      "sniperSellFeeDecayPeriod():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_sniperSellFeeDecayPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sniperSellFeeDecayPeriod",
      "sniperSellFeeDecayPeriod():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sniperSellFeeEnabled(): boolean {
    let result = super.call(
      "sniperSellFeeEnabled",
      "sniperSellFeeEnabled():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_sniperSellFeeEnabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "sniperSellFeeEnabled",
      "sniperSellFeeEnabled():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  stakingBuyFee(): BigInt {
    let result = super.call("stakingBuyFee", "stakingBuyFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_stakingBuyFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakingBuyFee",
      "stakingBuyFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakingFeeRecipient(): Address {
    let result = super.call(
      "stakingFeeRecipient",
      "stakingFeeRecipient():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_stakingFeeRecipient(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "stakingFeeRecipient",
      "stakingFeeRecipient():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakingSellFee(): BigInt {
    let result = super.call("stakingSellFee", "stakingSellFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_stakingSellFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakingSellFee",
      "stakingSellFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  swapFeesAtAmount(): BigInt {
    let result = super.call(
      "swapFeesAtAmount",
      "swapFeesAtAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_swapFeesAtAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "swapFeesAtAmount",
      "swapFeesAtAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  swapFeesRouter(): Address {
    let result = super.call("swapFeesRouter", "swapFeesRouter():(address)", []);

    return result[0].toAddress();
  }

  try_swapFeesRouter(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "swapFeesRouter",
      "swapFeesRouter():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  swapPairToken(): Address {
    let result = super.call("swapPairToken", "swapPairToken():(address)", []);

    return result[0].toAddress();
  }

  try_swapPairToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "swapPairToken",
      "swapPairToken():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  swappingFeesEnabled(): boolean {
    let result = super.call(
      "swappingFeesEnabled",
      "swappingFeesEnabled():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_swappingFeesEnabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "swappingFeesEnabled",
      "swappingFeesEnabled():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalBuyFee(): BigInt {
    let result = super.call("totalBuyFee", "totalBuyFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalBuyFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalBuyFee", "totalBuyFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSellFee(): BigInt {
    let result = super.call("totalSellFee", "totalSellFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSellFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSellFee", "totalSellFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tradingEnabled(): boolean {
    let result = super.call("tradingEnabled", "tradingEnabled():(bool)", []);

    return result[0].toBoolean();
  }

  try_tradingEnabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall("tradingEnabled", "tradingEnabled():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  tradingEnabledTimestamp(): BigInt {
    let result = super.call(
      "tradingEnabledTimestamp",
      "tradingEnabledTimestamp():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_tradingEnabledTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tradingEnabledTimestamp",
      "tradingEnabledTimestamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  treasuryBuyFee(): BigInt {
    let result = super.call("treasuryBuyFee", "treasuryBuyFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_treasuryBuyFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "treasuryBuyFee",
      "treasuryBuyFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  treasuryFeeRecipient(): Address {
    let result = super.call(
      "treasuryFeeRecipient",
      "treasuryFeeRecipient():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_treasuryFeeRecipient(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "treasuryFeeRecipient",
      "treasuryFeeRecipient():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  treasurySellFee(): BigInt {
    let result = super.call(
      "treasurySellFee",
      "treasurySellFee():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_treasurySellFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "treasurySellFee",
      "treasurySellFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _router(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _swapPairToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddBotCall extends ethereum.Call {
  get inputs(): AddBotCall__Inputs {
    return new AddBotCall__Inputs(this);
  }

  get outputs(): AddBotCall__Outputs {
    return new AddBotCall__Outputs(this);
  }
}

export class AddBotCall__Inputs {
  _call: AddBotCall;

  constructor(call: AddBotCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddBotCall__Outputs {
  _call: AddBotCall;

  constructor(call: AddBotCall) {
    this._call = call;
  }
}

export class AddLeetPairCall extends ethereum.Call {
  get inputs(): AddLeetPairCall__Inputs {
    return new AddLeetPairCall__Inputs(this);
  }

  get outputs(): AddLeetPairCall__Outputs {
    return new AddLeetPairCall__Outputs(this);
  }
}

export class AddLeetPairCall__Inputs {
  _call: AddLeetPairCall;

  constructor(call: AddLeetPairCall) {
    this._call = call;
  }

  get _pair(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddLeetPairCall__Outputs {
  _call: AddLeetPairCall;

  constructor(call: AddLeetPairCall) {
    this._call = call;
  }
}

export class AddWhitelistedFactoryCall extends ethereum.Call {
  get inputs(): AddWhitelistedFactoryCall__Inputs {
    return new AddWhitelistedFactoryCall__Inputs(this);
  }

  get outputs(): AddWhitelistedFactoryCall__Outputs {
    return new AddWhitelistedFactoryCall__Outputs(this);
  }
}

export class AddWhitelistedFactoryCall__Inputs {
  _call: AddWhitelistedFactoryCall;

  constructor(call: AddWhitelistedFactoryCall) {
    this._call = call;
  }

  get _factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddWhitelistedFactoryCall__Outputs {
  _call: AddWhitelistedFactoryCall;

  constructor(call: AddWhitelistedFactoryCall) {
    this._call = call;
  }
}

export class AirdropHoldersCall extends ethereum.Call {
  get inputs(): AirdropHoldersCall__Inputs {
    return new AirdropHoldersCall__Inputs(this);
  }

  get outputs(): AirdropHoldersCall__Outputs {
    return new AirdropHoldersCall__Outputs(this);
  }
}

export class AirdropHoldersCall__Inputs {
  _call: AirdropHoldersCall;

  constructor(call: AirdropHoldersCall) {
    this._call = call;
  }

  get wallets(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class AirdropHoldersCall__Outputs {
  _call: AirdropHoldersCall;

  constructor(call: AirdropHoldersCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class EnableTradingCall extends ethereum.Call {
  get inputs(): EnableTradingCall__Inputs {
    return new EnableTradingCall__Inputs(this);
  }

  get outputs(): EnableTradingCall__Outputs {
    return new EnableTradingCall__Outputs(this);
  }
}

export class EnableTradingCall__Inputs {
  _call: EnableTradingCall;

  constructor(call: EnableTradingCall) {
    this._call = call;
  }
}

export class EnableTradingCall__Outputs {
  _call: EnableTradingCall;

  constructor(call: EnableTradingCall) {
    this._call = call;
  }
}

export class ExcludeFromFeeCall extends ethereum.Call {
  get inputs(): ExcludeFromFeeCall__Inputs {
    return new ExcludeFromFeeCall__Inputs(this);
  }

  get outputs(): ExcludeFromFeeCall__Outputs {
    return new ExcludeFromFeeCall__Outputs(this);
  }
}

export class ExcludeFromFeeCall__Inputs {
  _call: ExcludeFromFeeCall;

  constructor(call: ExcludeFromFeeCall) {
    this._call = call;
  }

  get _account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ExcludeFromFeeCall__Outputs {
  _call: ExcludeFromFeeCall;

  constructor(call: ExcludeFromFeeCall) {
    this._call = call;
  }
}

export class ExcludeFromMaxWalletCall extends ethereum.Call {
  get inputs(): ExcludeFromMaxWalletCall__Inputs {
    return new ExcludeFromMaxWalletCall__Inputs(this);
  }

  get outputs(): ExcludeFromMaxWalletCall__Outputs {
    return new ExcludeFromMaxWalletCall__Outputs(this);
  }
}

export class ExcludeFromMaxWalletCall__Inputs {
  _call: ExcludeFromMaxWalletCall;

  constructor(call: ExcludeFromMaxWalletCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ExcludeFromMaxWalletCall__Outputs {
  _call: ExcludeFromMaxWalletCall;

  constructor(call: ExcludeFromMaxWalletCall) {
    this._call = call;
  }
}

export class IncludeInFeeCall extends ethereum.Call {
  get inputs(): IncludeInFeeCall__Inputs {
    return new IncludeInFeeCall__Inputs(this);
  }

  get outputs(): IncludeInFeeCall__Outputs {
    return new IncludeInFeeCall__Outputs(this);
  }
}

export class IncludeInFeeCall__Inputs {
  _call: IncludeInFeeCall;

  constructor(call: IncludeInFeeCall) {
    this._call = call;
  }

  get _account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class IncludeInFeeCall__Outputs {
  _call: IncludeInFeeCall;

  constructor(call: IncludeInFeeCall) {
    this._call = call;
  }
}

export class IncludeInMaxWalletCall extends ethereum.Call {
  get inputs(): IncludeInMaxWalletCall__Inputs {
    return new IncludeInMaxWalletCall__Inputs(this);
  }

  get outputs(): IncludeInMaxWalletCall__Outputs {
    return new IncludeInMaxWalletCall__Outputs(this);
  }
}

export class IncludeInMaxWalletCall__Inputs {
  _call: IncludeInMaxWalletCall;

  constructor(call: IncludeInMaxWalletCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class IncludeInMaxWalletCall__Outputs {
  _call: IncludeInMaxWalletCall;

  constructor(call: IncludeInMaxWalletCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IsLeetPairCall extends ethereum.Call {
  get inputs(): IsLeetPairCall__Inputs {
    return new IsLeetPairCall__Inputs(this);
  }

  get outputs(): IsLeetPairCall__Outputs {
    return new IsLeetPairCall__Outputs(this);
  }
}

export class IsLeetPairCall__Inputs {
  _call: IsLeetPairCall;

  constructor(call: IsLeetPairCall) {
    this._call = call;
  }

  get _pair(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class IsLeetPairCall__Outputs {
  _call: IsLeetPairCall;

  constructor(call: IsLeetPairCall) {
    this._call = call;
  }

  get isPair(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RemoveBotCall extends ethereum.Call {
  get inputs(): RemoveBotCall__Inputs {
    return new RemoveBotCall__Inputs(this);
  }

  get outputs(): RemoveBotCall__Outputs {
    return new RemoveBotCall__Outputs(this);
  }
}

export class RemoveBotCall__Inputs {
  _call: RemoveBotCall;

  constructor(call: RemoveBotCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveBotCall__Outputs {
  _call: RemoveBotCall;

  constructor(call: RemoveBotCall) {
    this._call = call;
  }
}

export class RemoveLeetPairCall extends ethereum.Call {
  get inputs(): RemoveLeetPairCall__Inputs {
    return new RemoveLeetPairCall__Inputs(this);
  }

  get outputs(): RemoveLeetPairCall__Outputs {
    return new RemoveLeetPairCall__Outputs(this);
  }
}

export class RemoveLeetPairCall__Inputs {
  _call: RemoveLeetPairCall;

  constructor(call: RemoveLeetPairCall) {
    this._call = call;
  }

  get _pair(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveLeetPairCall__Outputs {
  _call: RemoveLeetPairCall;

  constructor(call: RemoveLeetPairCall) {
    this._call = call;
  }
}

export class RemoveWhitelistedFactoryCall extends ethereum.Call {
  get inputs(): RemoveWhitelistedFactoryCall__Inputs {
    return new RemoveWhitelistedFactoryCall__Inputs(this);
  }

  get outputs(): RemoveWhitelistedFactoryCall__Outputs {
    return new RemoveWhitelistedFactoryCall__Outputs(this);
  }
}

export class RemoveWhitelistedFactoryCall__Inputs {
  _call: RemoveWhitelistedFactoryCall;

  constructor(call: RemoveWhitelistedFactoryCall) {
    this._call = call;
  }

  get _factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveWhitelistedFactoryCall__Outputs {
  _call: RemoveWhitelistedFactoryCall;

  constructor(call: RemoveWhitelistedFactoryCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetBuyFeesCall extends ethereum.Call {
  get inputs(): SetBuyFeesCall__Inputs {
    return new SetBuyFeesCall__Inputs(this);
  }

  get outputs(): SetBuyFeesCall__Outputs {
    return new SetBuyFeesCall__Outputs(this);
  }
}

export class SetBuyFeesCall__Inputs {
  _call: SetBuyFeesCall;

  constructor(call: SetBuyFeesCall) {
    this._call = call;
  }

  get _burnBuyFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _farmsBuyFee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _stakingBuyFee(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _treasuryBuyFee(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SetBuyFeesCall__Outputs {
  _call: SetBuyFeesCall;

  constructor(call: SetBuyFeesCall) {
    this._call = call;
  }
}

export class SetFarmsFeeRecipientCall extends ethereum.Call {
  get inputs(): SetFarmsFeeRecipientCall__Inputs {
    return new SetFarmsFeeRecipientCall__Inputs(this);
  }

  get outputs(): SetFarmsFeeRecipientCall__Outputs {
    return new SetFarmsFeeRecipientCall__Outputs(this);
  }
}

export class SetFarmsFeeRecipientCall__Inputs {
  _call: SetFarmsFeeRecipientCall;

  constructor(call: SetFarmsFeeRecipientCall) {
    this._call = call;
  }

  get _account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFarmsFeeRecipientCall__Outputs {
  _call: SetFarmsFeeRecipientCall;

  constructor(call: SetFarmsFeeRecipientCall) {
    this._call = call;
  }
}

export class SetFeeDiscountOracleCall extends ethereum.Call {
  get inputs(): SetFeeDiscountOracleCall__Inputs {
    return new SetFeeDiscountOracleCall__Inputs(this);
  }

  get outputs(): SetFeeDiscountOracleCall__Outputs {
    return new SetFeeDiscountOracleCall__Outputs(this);
  }
}

export class SetFeeDiscountOracleCall__Inputs {
  _call: SetFeeDiscountOracleCall;

  constructor(call: SetFeeDiscountOracleCall) {
    this._call = call;
  }

  get _oracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeDiscountOracleCall__Outputs {
  _call: SetFeeDiscountOracleCall;

  constructor(call: SetFeeDiscountOracleCall) {
    this._call = call;
  }
}

export class SetIndirectSwapFeeEnabledCall extends ethereum.Call {
  get inputs(): SetIndirectSwapFeeEnabledCall__Inputs {
    return new SetIndirectSwapFeeEnabledCall__Inputs(this);
  }

  get outputs(): SetIndirectSwapFeeEnabledCall__Outputs {
    return new SetIndirectSwapFeeEnabledCall__Outputs(this);
  }
}

export class SetIndirectSwapFeeEnabledCall__Inputs {
  _call: SetIndirectSwapFeeEnabledCall;

  constructor(call: SetIndirectSwapFeeEnabledCall) {
    this._call = call;
  }

  get _indirectSwapFeeEnabled(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetIndirectSwapFeeEnabledCall__Outputs {
  _call: SetIndirectSwapFeeEnabledCall;

  constructor(call: SetIndirectSwapFeeEnabledCall) {
    this._call = call;
  }
}

export class SetLiquidityManagementPhaseCall extends ethereum.Call {
  get inputs(): SetLiquidityManagementPhaseCall__Inputs {
    return new SetLiquidityManagementPhaseCall__Inputs(this);
  }

  get outputs(): SetLiquidityManagementPhaseCall__Outputs {
    return new SetLiquidityManagementPhaseCall__Outputs(this);
  }
}

export class SetLiquidityManagementPhaseCall__Inputs {
  _call: SetLiquidityManagementPhaseCall;

  constructor(call: SetLiquidityManagementPhaseCall) {
    this._call = call;
  }

  get isLiquidityManagementPhase_(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetLiquidityManagementPhaseCall__Outputs {
  _call: SetLiquidityManagementPhaseCall;

  constructor(call: SetLiquidityManagementPhaseCall) {
    this._call = call;
  }
}

export class SetLiquidityManagerCall extends ethereum.Call {
  get inputs(): SetLiquidityManagerCall__Inputs {
    return new SetLiquidityManagerCall__Inputs(this);
  }

  get outputs(): SetLiquidityManagerCall__Outputs {
    return new SetLiquidityManagerCall__Outputs(this);
  }
}

export class SetLiquidityManagerCall__Inputs {
  _call: SetLiquidityManagerCall;

  constructor(call: SetLiquidityManagerCall) {
    this._call = call;
  }

  get _liquidityManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _isManager(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetLiquidityManagerCall__Outputs {
  _call: SetLiquidityManagerCall;

  constructor(call: SetLiquidityManagerCall) {
    this._call = call;
  }
}

export class SetMaxSwapFeesAmountCall extends ethereum.Call {
  get inputs(): SetMaxSwapFeesAmountCall__Inputs {
    return new SetMaxSwapFeesAmountCall__Inputs(this);
  }

  get outputs(): SetMaxSwapFeesAmountCall__Outputs {
    return new SetMaxSwapFeesAmountCall__Outputs(this);
  }
}

export class SetMaxSwapFeesAmountCall__Inputs {
  _call: SetMaxSwapFeesAmountCall;

  constructor(call: SetMaxSwapFeesAmountCall) {
    this._call = call;
  }

  get _maxSwapFeesAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxSwapFeesAmountCall__Outputs {
  _call: SetMaxSwapFeesAmountCall;

  constructor(call: SetMaxSwapFeesAmountCall) {
    this._call = call;
  }
}

export class SetMaxWalletAmountCall extends ethereum.Call {
  get inputs(): SetMaxWalletAmountCall__Inputs {
    return new SetMaxWalletAmountCall__Inputs(this);
  }

  get outputs(): SetMaxWalletAmountCall__Outputs {
    return new SetMaxWalletAmountCall__Outputs(this);
  }
}

export class SetMaxWalletAmountCall__Inputs {
  _call: SetMaxWalletAmountCall;

  constructor(call: SetMaxWalletAmountCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxWalletAmountCall__Outputs {
  _call: SetMaxWalletAmountCall;

  constructor(call: SetMaxWalletAmountCall) {
    this._call = call;
  }
}

export class SetMaxWalletEnabledCall extends ethereum.Call {
  get inputs(): SetMaxWalletEnabledCall__Inputs {
    return new SetMaxWalletEnabledCall__Inputs(this);
  }

  get outputs(): SetMaxWalletEnabledCall__Outputs {
    return new SetMaxWalletEnabledCall__Outputs(this);
  }
}

export class SetMaxWalletEnabledCall__Inputs {
  _call: SetMaxWalletEnabledCall;

  constructor(call: SetMaxWalletEnabledCall) {
    this._call = call;
  }

  get enabled(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetMaxWalletEnabledCall__Outputs {
  _call: SetMaxWalletEnabledCall;

  constructor(call: SetMaxWalletEnabledCall) {
    this._call = call;
  }
}

export class SetPairAutoDetectionEnabledCall extends ethereum.Call {
  get inputs(): SetPairAutoDetectionEnabledCall__Inputs {
    return new SetPairAutoDetectionEnabledCall__Inputs(this);
  }

  get outputs(): SetPairAutoDetectionEnabledCall__Outputs {
    return new SetPairAutoDetectionEnabledCall__Outputs(this);
  }
}

export class SetPairAutoDetectionEnabledCall__Inputs {
  _call: SetPairAutoDetectionEnabledCall;

  constructor(call: SetPairAutoDetectionEnabledCall) {
    this._call = call;
  }

  get _pairAutoDetectionEnabled(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetPairAutoDetectionEnabledCall__Outputs {
  _call: SetPairAutoDetectionEnabledCall;

  constructor(call: SetPairAutoDetectionEnabledCall) {
    this._call = call;
  }
}

export class SetSellFeesCall extends ethereum.Call {
  get inputs(): SetSellFeesCall__Inputs {
    return new SetSellFeesCall__Inputs(this);
  }

  get outputs(): SetSellFeesCall__Outputs {
    return new SetSellFeesCall__Outputs(this);
  }
}

export class SetSellFeesCall__Inputs {
  _call: SetSellFeesCall;

  constructor(call: SetSellFeesCall) {
    this._call = call;
  }

  get _burnSellFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _farmsSellFee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _stakingSellFee(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _treasurySellFee(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SetSellFeesCall__Outputs {
  _call: SetSellFeesCall;

  constructor(call: SetSellFeesCall) {
    this._call = call;
  }
}

export class SetSniperBuyFeeEnabledCall extends ethereum.Call {
  get inputs(): SetSniperBuyFeeEnabledCall__Inputs {
    return new SetSniperBuyFeeEnabledCall__Inputs(this);
  }

  get outputs(): SetSniperBuyFeeEnabledCall__Outputs {
    return new SetSniperBuyFeeEnabledCall__Outputs(this);
  }
}

export class SetSniperBuyFeeEnabledCall__Inputs {
  _call: SetSniperBuyFeeEnabledCall;

  constructor(call: SetSniperBuyFeeEnabledCall) {
    this._call = call;
  }

  get _sniperBuyFeeEnabled(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetSniperBuyFeeEnabledCall__Outputs {
  _call: SetSniperBuyFeeEnabledCall;

  constructor(call: SetSniperBuyFeeEnabledCall) {
    this._call = call;
  }
}

export class SetSniperSellFeeEnabledCall extends ethereum.Call {
  get inputs(): SetSniperSellFeeEnabledCall__Inputs {
    return new SetSniperSellFeeEnabledCall__Inputs(this);
  }

  get outputs(): SetSniperSellFeeEnabledCall__Outputs {
    return new SetSniperSellFeeEnabledCall__Outputs(this);
  }
}

export class SetSniperSellFeeEnabledCall__Inputs {
  _call: SetSniperSellFeeEnabledCall;

  constructor(call: SetSniperSellFeeEnabledCall) {
    this._call = call;
  }

  get _sniperSellFeeEnabled(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetSniperSellFeeEnabledCall__Outputs {
  _call: SetSniperSellFeeEnabledCall;

  constructor(call: SetSniperSellFeeEnabledCall) {
    this._call = call;
  }
}

export class SetStakingFeeRecipientCall extends ethereum.Call {
  get inputs(): SetStakingFeeRecipientCall__Inputs {
    return new SetStakingFeeRecipientCall__Inputs(this);
  }

  get outputs(): SetStakingFeeRecipientCall__Outputs {
    return new SetStakingFeeRecipientCall__Outputs(this);
  }
}

export class SetStakingFeeRecipientCall__Inputs {
  _call: SetStakingFeeRecipientCall;

  constructor(call: SetStakingFeeRecipientCall) {
    this._call = call;
  }

  get _account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetStakingFeeRecipientCall__Outputs {
  _call: SetStakingFeeRecipientCall;

  constructor(call: SetStakingFeeRecipientCall) {
    this._call = call;
  }
}

export class SetSwapFeesAtAmountCall extends ethereum.Call {
  get inputs(): SetSwapFeesAtAmountCall__Inputs {
    return new SetSwapFeesAtAmountCall__Inputs(this);
  }

  get outputs(): SetSwapFeesAtAmountCall__Outputs {
    return new SetSwapFeesAtAmountCall__Outputs(this);
  }
}

export class SetSwapFeesAtAmountCall__Inputs {
  _call: SetSwapFeesAtAmountCall;

  constructor(call: SetSwapFeesAtAmountCall) {
    this._call = call;
  }

  get _swapFeesAtAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetSwapFeesAtAmountCall__Outputs {
  _call: SetSwapFeesAtAmountCall;

  constructor(call: SetSwapFeesAtAmountCall) {
    this._call = call;
  }
}

export class SetSwapFeesRouterCall extends ethereum.Call {
  get inputs(): SetSwapFeesRouterCall__Inputs {
    return new SetSwapFeesRouterCall__Inputs(this);
  }

  get outputs(): SetSwapFeesRouterCall__Outputs {
    return new SetSwapFeesRouterCall__Outputs(this);
  }
}

export class SetSwapFeesRouterCall__Inputs {
  _call: SetSwapFeesRouterCall;

  constructor(call: SetSwapFeesRouterCall) {
    this._call = call;
  }

  get _swapFeesRouter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetSwapFeesRouterCall__Outputs {
  _call: SetSwapFeesRouterCall;

  constructor(call: SetSwapFeesRouterCall) {
    this._call = call;
  }
}

export class SetSwappingFeesEnabledCall extends ethereum.Call {
  get inputs(): SetSwappingFeesEnabledCall__Inputs {
    return new SetSwappingFeesEnabledCall__Inputs(this);
  }

  get outputs(): SetSwappingFeesEnabledCall__Outputs {
    return new SetSwappingFeesEnabledCall__Outputs(this);
  }
}

export class SetSwappingFeesEnabledCall__Inputs {
  _call: SetSwappingFeesEnabledCall;

  constructor(call: SetSwappingFeesEnabledCall) {
    this._call = call;
  }

  get _swappingFeesEnabled(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetSwappingFeesEnabledCall__Outputs {
  _call: SetSwappingFeesEnabledCall;

  constructor(call: SetSwappingFeesEnabledCall) {
    this._call = call;
  }
}

export class SetTradingEnabledTimestampCall extends ethereum.Call {
  get inputs(): SetTradingEnabledTimestampCall__Inputs {
    return new SetTradingEnabledTimestampCall__Inputs(this);
  }

  get outputs(): SetTradingEnabledTimestampCall__Outputs {
    return new SetTradingEnabledTimestampCall__Outputs(this);
  }
}

export class SetTradingEnabledTimestampCall__Inputs {
  _call: SetTradingEnabledTimestampCall;

  constructor(call: SetTradingEnabledTimestampCall) {
    this._call = call;
  }

  get _timestamp(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetTradingEnabledTimestampCall__Outputs {
  _call: SetTradingEnabledTimestampCall;

  constructor(call: SetTradingEnabledTimestampCall) {
    this._call = call;
  }
}

export class SetTreasuryFeeRecipientCall extends ethereum.Call {
  get inputs(): SetTreasuryFeeRecipientCall__Inputs {
    return new SetTreasuryFeeRecipientCall__Inputs(this);
  }

  get outputs(): SetTreasuryFeeRecipientCall__Outputs {
    return new SetTreasuryFeeRecipientCall__Outputs(this);
  }
}

export class SetTreasuryFeeRecipientCall__Inputs {
  _call: SetTreasuryFeeRecipientCall;

  constructor(call: SetTreasuryFeeRecipientCall) {
    this._call = call;
  }

  get _account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTreasuryFeeRecipientCall__Outputs {
  _call: SetTreasuryFeeRecipientCall;

  constructor(call: SetTreasuryFeeRecipientCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawStuckEthCall extends ethereum.Call {
  get inputs(): WithdrawStuckEthCall__Inputs {
    return new WithdrawStuckEthCall__Inputs(this);
  }

  get outputs(): WithdrawStuckEthCall__Outputs {
    return new WithdrawStuckEthCall__Outputs(this);
  }
}

export class WithdrawStuckEthCall__Inputs {
  _call: WithdrawStuckEthCall;

  constructor(call: WithdrawStuckEthCall) {
    this._call = call;
  }
}

export class WithdrawStuckEthCall__Outputs {
  _call: WithdrawStuckEthCall;

  constructor(call: WithdrawStuckEthCall) {
    this._call = call;
  }
}

export class WithdrawStuckEth1Call extends ethereum.Call {
  get inputs(): WithdrawStuckEth1Call__Inputs {
    return new WithdrawStuckEth1Call__Inputs(this);
  }

  get outputs(): WithdrawStuckEth1Call__Outputs {
    return new WithdrawStuckEth1Call__Outputs(this);
  }
}

export class WithdrawStuckEth1Call__Inputs {
  _call: WithdrawStuckEth1Call;

  constructor(call: WithdrawStuckEth1Call) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawStuckEth1Call__Outputs {
  _call: WithdrawStuckEth1Call;

  constructor(call: WithdrawStuckEth1Call) {
    this._call = call;
  }
}

export class WithdrawStuckTokensCall extends ethereum.Call {
  get inputs(): WithdrawStuckTokensCall__Inputs {
    return new WithdrawStuckTokensCall__Inputs(this);
  }

  get outputs(): WithdrawStuckTokensCall__Outputs {
    return new WithdrawStuckTokensCall__Outputs(this);
  }
}

export class WithdrawStuckTokensCall__Inputs {
  _call: WithdrawStuckTokensCall;

  constructor(call: WithdrawStuckTokensCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawStuckTokensCall__Outputs {
  _call: WithdrawStuckTokensCall;

  constructor(call: WithdrawStuckTokensCall) {
    this._call = call;
  }
}

export class WithdrawStuckTokens1Call extends ethereum.Call {
  get inputs(): WithdrawStuckTokens1Call__Inputs {
    return new WithdrawStuckTokens1Call__Inputs(this);
  }

  get outputs(): WithdrawStuckTokens1Call__Outputs {
    return new WithdrawStuckTokens1Call__Outputs(this);
  }
}

export class WithdrawStuckTokens1Call__Inputs {
  _call: WithdrawStuckTokens1Call;

  constructor(call: WithdrawStuckTokens1Call) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawStuckTokens1Call__Outputs {
  _call: WithdrawStuckTokens1Call;

  constructor(call: WithdrawStuckTokens1Call) {
    this._call = call;
  }
}
